/* 
 * SaridaEdgeAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnalysisResult
    /// </summary>
    [DataContract]
        public partial class AnalysisResult :  IEquatable<AnalysisResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisResult" /> class.
        /// </summary>
        /// <param name="frameTime">frameTime (required).</param>
        /// <param name="detectionStates">detectionStates (required).</param>
        public AnalysisResult(FrameTime frameTime = default(FrameTime), List<DetectionState> detectionStates = default(List<DetectionState>))
        {
            // to ensure "frameTime" is required (not null)
            if (frameTime == null)
            {
                throw new InvalidDataException("frameTime is a required property for AnalysisResult and cannot be null");
            }
            else
            {
                this.FrameTime = frameTime;
            }
            // to ensure "detectionStates" is required (not null)
            if (detectionStates == null)
            {
                throw new InvalidDataException("detectionStates is a required property for AnalysisResult and cannot be null");
            }
            else
            {
                this.DetectionStates = detectionStates;
            }
        }
        
        /// <summary>
        /// Gets or Sets FrameTime
        /// </summary>
        [DataMember(Name="frameTime", EmitDefaultValue=false)]
        public FrameTime FrameTime { get; set; }

        /// <summary>
        /// Gets or Sets DetectionStates
        /// </summary>
        [DataMember(Name="detectionStates", EmitDefaultValue=false)]
        public List<DetectionState> DetectionStates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisResult {\n");
            sb.Append("  FrameTime: ").Append(FrameTime).Append("\n");
            sb.Append("  DetectionStates: ").Append(DetectionStates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalysisResult);
        }

        /// <summary>
        /// Returns true if AnalysisResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalysisResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FrameTime == input.FrameTime ||
                    (this.FrameTime != null &&
                    this.FrameTime.Equals(input.FrameTime))
                ) && 
                (
                    this.DetectionStates == input.DetectionStates ||
                    this.DetectionStates != null &&
                    input.DetectionStates != null &&
                    this.DetectionStates.SequenceEqual(input.DetectionStates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FrameTime != null)
                    hashCode = hashCode * 59 + this.FrameTime.GetHashCode();
                if (this.DetectionStates != null)
                    hashCode = hashCode * 59 + this.DetectionStates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
