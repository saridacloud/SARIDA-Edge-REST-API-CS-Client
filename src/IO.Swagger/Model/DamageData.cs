/* 
 * SaridaEdgeAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DamageData
    /// </summary>
    [DataContract]
        public partial class DamageData :  IEquatable<DamageData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DamageData" /> class.
        /// </summary>
        /// <param name="frameTimeStart">frameTimeStart.</param>
        /// <param name="frameTimeEnd">frameTimeEnd.</param>
        /// <param name="inspectionNorm">inspectionNorm.</param>
        /// <param name="pathPosition">Lage in Laengsrichtung [m].</param>
        /// <param name="rangeDamageCode">Kode fuer Streckenschaden.</param>
        /// <param name="majorCode">Hauptcode.</param>
        /// <param name="characterization1">Charakterisierung 1.</param>
        /// <param name="characterization2">Charakterisierung 2.</param>
        /// <param name="quantification1">Quantifizierung 1.</param>
        /// <param name="quantification2">Quantifizierung 2.</param>
        /// <param name="perimeterLocation1">Lage am Umfang 1.</param>
        /// <param name="perimeterLocation2">Lage am Umfang 2.</param>
        /// <param name="connection">Verbindung.</param>
        public DamageData(FrameTime frameTimeStart = default(FrameTime), FrameTime frameTimeEnd = default(FrameTime), InspectionNorm inspectionNorm = default(InspectionNorm), double? pathPosition = default(double?), string rangeDamageCode = default(string), string majorCode = default(string), string characterization1 = default(string), string characterization2 = default(string), double? quantification1 = default(double?), double? quantification2 = default(double?), double? perimeterLocation1 = default(double?), double? perimeterLocation2 = default(double?), bool? connection = default(bool?))
        {
            this.FrameTimeStart = frameTimeStart;
            this.FrameTimeEnd = frameTimeEnd;
            this.InspectionNorm = inspectionNorm;
            this.PathPosition = pathPosition;
            this.RangeDamageCode = rangeDamageCode;
            this.MajorCode = majorCode;
            this.Characterization1 = characterization1;
            this.Characterization2 = characterization2;
            this.Quantification1 = quantification1;
            this.Quantification2 = quantification2;
            this.PerimeterLocation1 = perimeterLocation1;
            this.PerimeterLocation2 = perimeterLocation2;
            this.Connection = connection;
        }
        
        /// <summary>
        /// Gets or Sets FrameTimeStart
        /// </summary>
        [DataMember(Name="frameTimeStart", EmitDefaultValue=false)]
        public FrameTime FrameTimeStart { get; set; }

        /// <summary>
        /// Gets or Sets FrameTimeEnd
        /// </summary>
        [DataMember(Name="frameTimeEnd", EmitDefaultValue=false)]
        public FrameTime FrameTimeEnd { get; set; }

        /// <summary>
        /// Gets or Sets InspectionNorm
        /// </summary>
        [DataMember(Name="inspectionNorm", EmitDefaultValue=false)]
        public InspectionNorm InspectionNorm { get; set; }

        /// <summary>
        /// Lage in Laengsrichtung [m]
        /// </summary>
        /// <value>Lage in Laengsrichtung [m]</value>
        [DataMember(Name="pathPosition", EmitDefaultValue=false)]
        public double? PathPosition { get; set; }

        /// <summary>
        /// Kode fuer Streckenschaden
        /// </summary>
        /// <value>Kode fuer Streckenschaden</value>
        [DataMember(Name="rangeDamageCode", EmitDefaultValue=false)]
        public string RangeDamageCode { get; set; }

        /// <summary>
        /// Hauptcode
        /// </summary>
        /// <value>Hauptcode</value>
        [DataMember(Name="majorCode", EmitDefaultValue=false)]
        public string MajorCode { get; set; }

        /// <summary>
        /// Charakterisierung 1
        /// </summary>
        /// <value>Charakterisierung 1</value>
        [DataMember(Name="characterization1", EmitDefaultValue=false)]
        public string Characterization1 { get; set; }

        /// <summary>
        /// Charakterisierung 2
        /// </summary>
        /// <value>Charakterisierung 2</value>
        [DataMember(Name="characterization2", EmitDefaultValue=false)]
        public string Characterization2 { get; set; }

        /// <summary>
        /// Quantifizierung 1
        /// </summary>
        /// <value>Quantifizierung 1</value>
        [DataMember(Name="quantification1", EmitDefaultValue=false)]
        public double? Quantification1 { get; set; }

        /// <summary>
        /// Quantifizierung 2
        /// </summary>
        /// <value>Quantifizierung 2</value>
        [DataMember(Name="quantification2", EmitDefaultValue=false)]
        public double? Quantification2 { get; set; }

        /// <summary>
        /// Lage am Umfang 1
        /// </summary>
        /// <value>Lage am Umfang 1</value>
        [DataMember(Name="perimeterLocation1", EmitDefaultValue=false)]
        public double? PerimeterLocation1 { get; set; }

        /// <summary>
        /// Lage am Umfang 2
        /// </summary>
        /// <value>Lage am Umfang 2</value>
        [DataMember(Name="perimeterLocation2", EmitDefaultValue=false)]
        public double? PerimeterLocation2 { get; set; }

        /// <summary>
        /// Verbindung
        /// </summary>
        /// <value>Verbindung</value>
        [DataMember(Name="connection", EmitDefaultValue=false)]
        public bool? Connection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DamageData {\n");
            sb.Append("  FrameTimeStart: ").Append(FrameTimeStart).Append("\n");
            sb.Append("  FrameTimeEnd: ").Append(FrameTimeEnd).Append("\n");
            sb.Append("  InspectionNorm: ").Append(InspectionNorm).Append("\n");
            sb.Append("  PathPosition: ").Append(PathPosition).Append("\n");
            sb.Append("  RangeDamageCode: ").Append(RangeDamageCode).Append("\n");
            sb.Append("  MajorCode: ").Append(MajorCode).Append("\n");
            sb.Append("  Characterization1: ").Append(Characterization1).Append("\n");
            sb.Append("  Characterization2: ").Append(Characterization2).Append("\n");
            sb.Append("  Quantification1: ").Append(Quantification1).Append("\n");
            sb.Append("  Quantification2: ").Append(Quantification2).Append("\n");
            sb.Append("  PerimeterLocation1: ").Append(PerimeterLocation1).Append("\n");
            sb.Append("  PerimeterLocation2: ").Append(PerimeterLocation2).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DamageData);
        }

        /// <summary>
        /// Returns true if DamageData instances are equal
        /// </summary>
        /// <param name="input">Instance of DamageData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DamageData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FrameTimeStart == input.FrameTimeStart ||
                    (this.FrameTimeStart != null &&
                    this.FrameTimeStart.Equals(input.FrameTimeStart))
                ) && 
                (
                    this.FrameTimeEnd == input.FrameTimeEnd ||
                    (this.FrameTimeEnd != null &&
                    this.FrameTimeEnd.Equals(input.FrameTimeEnd))
                ) && 
                (
                    this.InspectionNorm == input.InspectionNorm ||
                    (this.InspectionNorm != null &&
                    this.InspectionNorm.Equals(input.InspectionNorm))
                ) && 
                (
                    this.PathPosition == input.PathPosition ||
                    (this.PathPosition != null &&
                    this.PathPosition.Equals(input.PathPosition))
                ) && 
                (
                    this.RangeDamageCode == input.RangeDamageCode ||
                    (this.RangeDamageCode != null &&
                    this.RangeDamageCode.Equals(input.RangeDamageCode))
                ) && 
                (
                    this.MajorCode == input.MajorCode ||
                    (this.MajorCode != null &&
                    this.MajorCode.Equals(input.MajorCode))
                ) && 
                (
                    this.Characterization1 == input.Characterization1 ||
                    (this.Characterization1 != null &&
                    this.Characterization1.Equals(input.Characterization1))
                ) && 
                (
                    this.Characterization2 == input.Characterization2 ||
                    (this.Characterization2 != null &&
                    this.Characterization2.Equals(input.Characterization2))
                ) && 
                (
                    this.Quantification1 == input.Quantification1 ||
                    (this.Quantification1 != null &&
                    this.Quantification1.Equals(input.Quantification1))
                ) && 
                (
                    this.Quantification2 == input.Quantification2 ||
                    (this.Quantification2 != null &&
                    this.Quantification2.Equals(input.Quantification2))
                ) && 
                (
                    this.PerimeterLocation1 == input.PerimeterLocation1 ||
                    (this.PerimeterLocation1 != null &&
                    this.PerimeterLocation1.Equals(input.PerimeterLocation1))
                ) && 
                (
                    this.PerimeterLocation2 == input.PerimeterLocation2 ||
                    (this.PerimeterLocation2 != null &&
                    this.PerimeterLocation2.Equals(input.PerimeterLocation2))
                ) && 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FrameTimeStart != null)
                    hashCode = hashCode * 59 + this.FrameTimeStart.GetHashCode();
                if (this.FrameTimeEnd != null)
                    hashCode = hashCode * 59 + this.FrameTimeEnd.GetHashCode();
                if (this.InspectionNorm != null)
                    hashCode = hashCode * 59 + this.InspectionNorm.GetHashCode();
                if (this.PathPosition != null)
                    hashCode = hashCode * 59 + this.PathPosition.GetHashCode();
                if (this.RangeDamageCode != null)
                    hashCode = hashCode * 59 + this.RangeDamageCode.GetHashCode();
                if (this.MajorCode != null)
                    hashCode = hashCode * 59 + this.MajorCode.GetHashCode();
                if (this.Characterization1 != null)
                    hashCode = hashCode * 59 + this.Characterization1.GetHashCode();
                if (this.Characterization2 != null)
                    hashCode = hashCode * 59 + this.Characterization2.GetHashCode();
                if (this.Quantification1 != null)
                    hashCode = hashCode * 59 + this.Quantification1.GetHashCode();
                if (this.Quantification2 != null)
                    hashCode = hashCode * 59 + this.Quantification2.GetHashCode();
                if (this.PerimeterLocation1 != null)
                    hashCode = hashCode * 59 + this.PerimeterLocation1.GetHashCode();
                if (this.PerimeterLocation2 != null)
                    hashCode = hashCode * 59 + this.PerimeterLocation2.GetHashCode();
                if (this.Connection != null)
                    hashCode = hashCode * 59 + this.Connection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
