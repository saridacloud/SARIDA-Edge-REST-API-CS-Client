/* 
 * SaridaEdgeAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetectionState
    /// </summary>
    [DataContract]
        public partial class DetectionState :  IEquatable<DetectionState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectionState" /> class.
        /// </summary>
        /// <param name="detectionClass">detectionClass (required).</param>
        /// <param name="pathPosition">Weglaenge in [m].</param>
        /// <param name="detectionId">Internal ID of found detection.</param>
        /// <param name="pathPositionMin">Weglaenge Beginn Zustand in [m].</param>
        /// <param name="pathPositionMax">Weglaenge ende Zustand in [m].</param>
        /// <param name="clockPositionMin">Uhrzeit von [1-12].</param>
        /// <param name="clockPositionMax">Uhrzeit bis [1-12].</param>
        /// <param name="inspectionCode">Haupt-Kode / Inspektions-Kode.</param>
        /// <param name="c1">Charakterisierung 1.</param>
        /// <param name="c2">Charakterisierung 2.</param>
        public DetectionState(DetectionClasses detectionClass = default(DetectionClasses), double? pathPosition = default(double?), string detectionId = default(string), double? pathPositionMin = default(double?), double? pathPositionMax = default(double?), decimal? clockPositionMin = default(decimal?), decimal? clockPositionMax = default(decimal?), string inspectionCode = default(string), string c1 = default(string), string c2 = default(string))
        {
            // to ensure "detectionClass" is required (not null)
            if (detectionClass == null)
            {
                throw new InvalidDataException("detectionClass is a required property for DetectionState and cannot be null");
            }
            else
            {
                this.DetectionClass = detectionClass;
            }
            this.PathPosition = pathPosition;
            this.DetectionId = detectionId;
            this.PathPositionMin = pathPositionMin;
            this.PathPositionMax = pathPositionMax;
            this.ClockPositionMin = clockPositionMin;
            this.ClockPositionMax = clockPositionMax;
            this.InspectionCode = inspectionCode;
            this.C1 = c1;
            this.C2 = c2;
        }
        
        /// <summary>
        /// Gets or Sets DetectionClass
        /// </summary>
        [DataMember(Name="detectionClass", EmitDefaultValue=false)]
        public DetectionClasses DetectionClass { get; set; }

        /// <summary>
        /// Weglaenge in [m]
        /// </summary>
        /// <value>Weglaenge in [m]</value>
        [DataMember(Name="pathPosition", EmitDefaultValue=false)]
        public double? PathPosition { get; set; }

        /// <summary>
        /// Internal ID of found detection
        /// </summary>
        /// <value>Internal ID of found detection</value>
        [DataMember(Name="detectionId", EmitDefaultValue=false)]
        public string DetectionId { get; set; }

        /// <summary>
        /// Weglaenge Beginn Zustand in [m]
        /// </summary>
        /// <value>Weglaenge Beginn Zustand in [m]</value>
        [DataMember(Name="pathPositionMin", EmitDefaultValue=false)]
        public double? PathPositionMin { get; set; }

        /// <summary>
        /// Weglaenge ende Zustand in [m]
        /// </summary>
        /// <value>Weglaenge ende Zustand in [m]</value>
        [DataMember(Name="pathPositionMax", EmitDefaultValue=false)]
        public double? PathPositionMax { get; set; }

        /// <summary>
        /// Uhrzeit von [1-12]
        /// </summary>
        /// <value>Uhrzeit von [1-12]</value>
        [DataMember(Name="clockPositionMin", EmitDefaultValue=false)]
        public decimal? ClockPositionMin { get; set; }

        /// <summary>
        /// Uhrzeit bis [1-12]
        /// </summary>
        /// <value>Uhrzeit bis [1-12]</value>
        [DataMember(Name="clockPositionMax", EmitDefaultValue=false)]
        public decimal? ClockPositionMax { get; set; }

        /// <summary>
        /// Haupt-Kode / Inspektions-Kode
        /// </summary>
        /// <value>Haupt-Kode / Inspektions-Kode</value>
        [DataMember(Name="inspectionCode", EmitDefaultValue=false)]
        public string InspectionCode { get; set; }

        /// <summary>
        /// Charakterisierung 1
        /// </summary>
        /// <value>Charakterisierung 1</value>
        [DataMember(Name="c1", EmitDefaultValue=false)]
        public string C1 { get; set; }

        /// <summary>
        /// Charakterisierung 2
        /// </summary>
        /// <value>Charakterisierung 2</value>
        [DataMember(Name="c2", EmitDefaultValue=false)]
        public string C2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetectionState {\n");
            sb.Append("  DetectionClass: ").Append(DetectionClass).Append("\n");
            sb.Append("  PathPosition: ").Append(PathPosition).Append("\n");
            sb.Append("  DetectionId: ").Append(DetectionId).Append("\n");
            sb.Append("  PathPositionMin: ").Append(PathPositionMin).Append("\n");
            sb.Append("  PathPositionMax: ").Append(PathPositionMax).Append("\n");
            sb.Append("  ClockPositionMin: ").Append(ClockPositionMin).Append("\n");
            sb.Append("  ClockPositionMax: ").Append(ClockPositionMax).Append("\n");
            sb.Append("  InspectionCode: ").Append(InspectionCode).Append("\n");
            sb.Append("  C1: ").Append(C1).Append("\n");
            sb.Append("  C2: ").Append(C2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetectionState);
        }

        /// <summary>
        /// Returns true if DetectionState instances are equal
        /// </summary>
        /// <param name="input">Instance of DetectionState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetectionState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DetectionClass == input.DetectionClass ||
                    (this.DetectionClass != null &&
                    this.DetectionClass.Equals(input.DetectionClass))
                ) && 
                (
                    this.PathPosition == input.PathPosition ||
                    (this.PathPosition != null &&
                    this.PathPosition.Equals(input.PathPosition))
                ) && 
                (
                    this.DetectionId == input.DetectionId ||
                    (this.DetectionId != null &&
                    this.DetectionId.Equals(input.DetectionId))
                ) && 
                (
                    this.PathPositionMin == input.PathPositionMin ||
                    (this.PathPositionMin != null &&
                    this.PathPositionMin.Equals(input.PathPositionMin))
                ) && 
                (
                    this.PathPositionMax == input.PathPositionMax ||
                    (this.PathPositionMax != null &&
                    this.PathPositionMax.Equals(input.PathPositionMax))
                ) && 
                (
                    this.ClockPositionMin == input.ClockPositionMin ||
                    (this.ClockPositionMin != null &&
                    this.ClockPositionMin.Equals(input.ClockPositionMin))
                ) && 
                (
                    this.ClockPositionMax == input.ClockPositionMax ||
                    (this.ClockPositionMax != null &&
                    this.ClockPositionMax.Equals(input.ClockPositionMax))
                ) && 
                (
                    this.InspectionCode == input.InspectionCode ||
                    (this.InspectionCode != null &&
                    this.InspectionCode.Equals(input.InspectionCode))
                ) && 
                (
                    this.C1 == input.C1 ||
                    (this.C1 != null &&
                    this.C1.Equals(input.C1))
                ) && 
                (
                    this.C2 == input.C2 ||
                    (this.C2 != null &&
                    this.C2.Equals(input.C2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetectionClass != null)
                    hashCode = hashCode * 59 + this.DetectionClass.GetHashCode();
                if (this.PathPosition != null)
                    hashCode = hashCode * 59 + this.PathPosition.GetHashCode();
                if (this.DetectionId != null)
                    hashCode = hashCode * 59 + this.DetectionId.GetHashCode();
                if (this.PathPositionMin != null)
                    hashCode = hashCode * 59 + this.PathPositionMin.GetHashCode();
                if (this.PathPositionMax != null)
                    hashCode = hashCode * 59 + this.PathPositionMax.GetHashCode();
                if (this.ClockPositionMin != null)
                    hashCode = hashCode * 59 + this.ClockPositionMin.GetHashCode();
                if (this.ClockPositionMax != null)
                    hashCode = hashCode * 59 + this.ClockPositionMax.GetHashCode();
                if (this.InspectionCode != null)
                    hashCode = hashCode * 59 + this.InspectionCode.GetHashCode();
                if (this.C1 != null)
                    hashCode = hashCode * 59 + this.C1.GetHashCode();
                if (this.C2 != null)
                    hashCode = hashCode * 59 + this.C2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
