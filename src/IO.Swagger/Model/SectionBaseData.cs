/* 
 * SaridaEdgeAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SectionBaseData
    /// </summary>
    [DataContract]
        public partial class SectionBaseData :  IEquatable<SectionBaseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SectionBaseData" /> class.
        /// </summary>
        /// <param name="sectionId">sectionId (required).</param>
        /// <param name="diameter">diameter (required).</param>
        /// <param name="profile">profile.</param>
        /// <param name="material">material (required).</param>
        /// <param name="length">length.</param>
        public SectionBaseData(string sectionId = default(string), PipeDiameter diameter = default(PipeDiameter), PipeProfiles profile = default(PipeProfiles), Materials material = default(Materials), double? length = default(double?))
        {
            // to ensure "sectionId" is required (not null)
            if (sectionId == null)
            {
                throw new InvalidDataException("sectionId is a required property for SectionBaseData and cannot be null");
            }
            else
            {
                this.SectionId = sectionId;
            }
            // to ensure "diameter" is required (not null)
            if (diameter == null)
            {
                throw new InvalidDataException("diameter is a required property for SectionBaseData and cannot be null");
            }
            else
            {
                this.Diameter = diameter;
            }
            // to ensure "material" is required (not null)
            if (material == null)
            {
                throw new InvalidDataException("material is a required property for SectionBaseData and cannot be null");
            }
            else
            {
                this.Material = material;
            }
            this.Profile = profile;
            this.Length = length;
        }
        
        /// <summary>
        /// Gets or Sets SectionId
        /// </summary>
        [DataMember(Name="sectionId", EmitDefaultValue=false)]
        public string SectionId { get; set; }

        /// <summary>
        /// Gets or Sets Diameter
        /// </summary>
        [DataMember(Name="diameter", EmitDefaultValue=false)]
        public PipeDiameter Diameter { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public PipeProfiles Profile { get; set; }

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [DataMember(Name="material", EmitDefaultValue=false)]
        public Materials Material { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public double? Length { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SectionBaseData {\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SectionBaseData);
        }

        /// <summary>
        /// Returns true if SectionBaseData instances are equal
        /// </summary>
        /// <param name="input">Instance of SectionBaseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SectionBaseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SectionId == input.SectionId ||
                    (this.SectionId != null &&
                    this.SectionId.Equals(input.SectionId))
                ) && 
                (
                    this.Diameter == input.Diameter ||
                    (this.Diameter != null &&
                    this.Diameter.Equals(input.Diameter))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Material == input.Material ||
                    (this.Material != null &&
                    this.Material.Equals(input.Material))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SectionId != null)
                    hashCode = hashCode * 59 + this.SectionId.GetHashCode();
                if (this.Diameter != null)
                    hashCode = hashCode * 59 + this.Diameter.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Material != null)
                    hashCode = hashCode * 59 + this.Material.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
