/* 
 * SaridaEdgeAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GuiDetectionColorBody1
    /// </summary>
    [DataContract]
        public partial class GuiDetectionColorBody1 :  IEquatable<GuiDetectionColorBody1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuiDetectionColorBody1" /> class.
        /// </summary>
        /// <param name="detectionClass">detectionClass.</param>
        /// <param name="color">color.</param>
        public GuiDetectionColorBody1(DetectionClasses detectionClass = default(DetectionClasses), Color color = default(Color))
        {
            this.DetectionClass = detectionClass;
            this.Color = color;
        }
        
        /// <summary>
        /// Gets or Sets DetectionClass
        /// </summary>
        [DataMember(Name="detectionClass", EmitDefaultValue=false)]
        public DetectionClasses DetectionClass { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public Color Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GuiDetectionColorBody1 {\n");
            sb.Append("  DetectionClass: ").Append(DetectionClass).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GuiDetectionColorBody1);
        }

        /// <summary>
        /// Returns true if GuiDetectionColorBody1 instances are equal
        /// </summary>
        /// <param name="input">Instance of GuiDetectionColorBody1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GuiDetectionColorBody1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DetectionClass == input.DetectionClass ||
                    (this.DetectionClass != null &&
                    this.DetectionClass.Equals(input.DetectionClass))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetectionClass != null)
                    hashCode = hashCode * 59 + this.DetectionClass.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
