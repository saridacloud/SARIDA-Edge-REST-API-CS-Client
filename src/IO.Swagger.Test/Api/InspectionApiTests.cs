/* 
 * SaridaEdgeAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing InspectionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InspectionApiTests
    {
        private InspectionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InspectionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InspectionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InspectionApi
            //Assert.IsInstanceOfType(typeof(InspectionApi), instance, "instance is a InspectionApi");
        }

        /// <summary>
        /// Test InspectionDamageAddedPost
        /// </summary>
        [Test]
        public void InspectionDamageAddedPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DamageData body = null;
            //instance.InspectionDamageAddedPost(body);
            
        }
        /// <summary>
        /// Test InspectionRunBeginPausePut
        /// </summary>
        [Test]
        public void InspectionRunBeginPausePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FrameTime body = null;
            //instance.InspectionRunBeginPausePut(body);
            
        }
        /// <summary>
        /// Test InspectionRunEndPausePut
        /// </summary>
        [Test]
        public void InspectionRunEndPausePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FrameTime body = null;
            //instance.InspectionRunEndPausePut(body);
            
        }
        /// <summary>
        /// Test InspectionRunGet
        /// </summary>
        [Test]
        public void InspectionRunGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InspectionRunGet();
            //Assert.IsInstanceOf<InspectionRunStatus> (response, "response is InspectionRunStatus");
        }
        /// <summary>
        /// Test InspectionRunStartPut
        /// </summary>
        [Test]
        public void InspectionRunStartPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FrameTime body = null;
            //instance.InspectionRunStartPut(body);
            
        }
        /// <summary>
        /// Test InspectionRunStopPut
        /// </summary>
        [Test]
        public void InspectionRunStopPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.InspectionRunStopPut();
            
        }
        /// <summary>
        /// Test InspectionSectionDataGet
        /// </summary>
        [Test]
        public void InspectionSectionDataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InspectionSectionDataGet();
            //Assert.IsInstanceOf<SectionBaseData> (response, "response is SectionBaseData");
        }
        /// <summary>
        /// Test InspectionSectionDataPut
        /// </summary>
        [Test]
        public void InspectionSectionDataPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SectionBaseData body = null;
            //instance.InspectionSectionDataPut(body);
            
        }
    }

}
